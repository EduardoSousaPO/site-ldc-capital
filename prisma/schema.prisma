// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // USER, ADMIN, EDITOR
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         BlogPost[]
  materials     Material[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String @db.Text
  summary     String? @db.Text
  category    String
  cover       String?
  published   Boolean  @default(false)
  readingTime String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  authorId    String
  categoryId  String?
  author      User     @relation(fields: [authorId], references: [id])
  categoryRel Category? @relation(fields: [categoryId], references: [id])
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[]
}

model Material {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String? @db.Text
  content     String? @db.Text
  category    String
  type        String   // "Cartilha", "Guia", "E-book", "Planilha", etc.
  cover       String?  // URL da imagem de capa
  fileUrl     String?  // URL do arquivo para download
  fileName    String?  // Nome original do arquivo
  fileSize    String?  // Tamanho do arquivo
  pages       Int?     // Número de páginas (para PDFs)
  published   Boolean  @default(false)
  featured    Boolean  @default(false) // Material em destaque
  downloadCount Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
}